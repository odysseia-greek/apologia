// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: proto/kritias.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KritiasClient is the client API for Kritias service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KritiasClient interface {
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
	Options(ctx context.Context, in *OptionsRequest, opts ...grpc.CallOption) (*AggregatedOptions, error)
	Question(ctx context.Context, in *CreationRequest, opts ...grpc.CallOption) (*QuizResponse, error)
	Answer(ctx context.Context, in *AnswerRequest, opts ...grpc.CallOption) (*ComprehensiveResponse, error)
}

type kritiasClient struct {
	cc grpc.ClientConnInterface
}

func NewKritiasClient(cc grpc.ClientConnInterface) KritiasClient {
	return &kritiasClient{cc}
}

func (c *kritiasClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, "/apologia_kritias.Kritias/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kritiasClient) Options(ctx context.Context, in *OptionsRequest, opts ...grpc.CallOption) (*AggregatedOptions, error) {
	out := new(AggregatedOptions)
	err := c.cc.Invoke(ctx, "/apologia_kritias.Kritias/Options", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kritiasClient) Question(ctx context.Context, in *CreationRequest, opts ...grpc.CallOption) (*QuizResponse, error) {
	out := new(QuizResponse)
	err := c.cc.Invoke(ctx, "/apologia_kritias.Kritias/Question", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kritiasClient) Answer(ctx context.Context, in *AnswerRequest, opts ...grpc.CallOption) (*ComprehensiveResponse, error) {
	out := new(ComprehensiveResponse)
	err := c.cc.Invoke(ctx, "/apologia_kritias.Kritias/Answer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KritiasServer is the server API for Kritias service.
// All implementations must embed UnimplementedKritiasServer
// for forward compatibility
type KritiasServer interface {
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	Options(context.Context, *OptionsRequest) (*AggregatedOptions, error)
	Question(context.Context, *CreationRequest) (*QuizResponse, error)
	Answer(context.Context, *AnswerRequest) (*ComprehensiveResponse, error)
	mustEmbedUnimplementedKritiasServer()
}

// UnimplementedKritiasServer must be embedded to have forward compatible implementations.
type UnimplementedKritiasServer struct {
}

func (UnimplementedKritiasServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedKritiasServer) Options(context.Context, *OptionsRequest) (*AggregatedOptions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Options not implemented")
}
func (UnimplementedKritiasServer) Question(context.Context, *CreationRequest) (*QuizResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Question not implemented")
}
func (UnimplementedKritiasServer) Answer(context.Context, *AnswerRequest) (*ComprehensiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Answer not implemented")
}
func (UnimplementedKritiasServer) mustEmbedUnimplementedKritiasServer() {}

// UnsafeKritiasServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KritiasServer will
// result in compilation errors.
type UnsafeKritiasServer interface {
	mustEmbedUnimplementedKritiasServer()
}

func RegisterKritiasServer(s grpc.ServiceRegistrar, srv KritiasServer) {
	s.RegisterService(&Kritias_ServiceDesc, srv)
}

func _Kritias_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KritiasServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apologia_kritias.Kritias/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KritiasServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kritias_Options_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KritiasServer).Options(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apologia_kritias.Kritias/Options",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KritiasServer).Options(ctx, req.(*OptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kritias_Question_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KritiasServer).Question(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apologia_kritias.Kritias/Question",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KritiasServer).Question(ctx, req.(*CreationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kritias_Answer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KritiasServer).Answer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apologia_kritias.Kritias/Answer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KritiasServer).Answer(ctx, req.(*AnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Kritias_ServiceDesc is the grpc.ServiceDesc for Kritias service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Kritias_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apologia_kritias.Kritias",
	HandlerType: (*KritiasServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _Kritias_Health_Handler,
		},
		{
			MethodName: "Options",
			Handler:    _Kritias_Options_Handler,
		},
		{
			MethodName: "Question",
			Handler:    _Kritias_Question_Handler,
		},
		{
			MethodName: "Answer",
			Handler:    _Kritias_Answer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/kritias.proto",
}
