// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: proto/alkibiades.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AlkibiadesClient is the client API for Alkibiades service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlkibiadesClient interface {
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
	Options(ctx context.Context, in *OptionsRequest, opts ...grpc.CallOption) (*AggregatedOptions, error)
}

type alkibiadesClient struct {
	cc grpc.ClientConnInterface
}

func NewAlkibiadesClient(cc grpc.ClientConnInterface) AlkibiadesClient {
	return &alkibiadesClient{cc}
}

func (c *alkibiadesClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, "/apologia_alkibiades.Alkibiades/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alkibiadesClient) Options(ctx context.Context, in *OptionsRequest, opts ...grpc.CallOption) (*AggregatedOptions, error) {
	out := new(AggregatedOptions)
	err := c.cc.Invoke(ctx, "/apologia_alkibiades.Alkibiades/Options", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlkibiadesServer is the server API for Alkibiades service.
// All implementations must embed UnimplementedAlkibiadesServer
// for forward compatibility
type AlkibiadesServer interface {
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	Options(context.Context, *OptionsRequest) (*AggregatedOptions, error)
	mustEmbedUnimplementedAlkibiadesServer()
}

// UnimplementedAlkibiadesServer must be embedded to have forward compatible implementations.
type UnimplementedAlkibiadesServer struct {
}

func (UnimplementedAlkibiadesServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedAlkibiadesServer) Options(context.Context, *OptionsRequest) (*AggregatedOptions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Options not implemented")
}
func (UnimplementedAlkibiadesServer) mustEmbedUnimplementedAlkibiadesServer() {}

// UnsafeAlkibiadesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlkibiadesServer will
// result in compilation errors.
type UnsafeAlkibiadesServer interface {
	mustEmbedUnimplementedAlkibiadesServer()
}

func RegisterAlkibiadesServer(s grpc.ServiceRegistrar, srv AlkibiadesServer) {
	s.RegisterService(&Alkibiades_ServiceDesc, srv)
}

func _Alkibiades_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlkibiadesServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apologia_alkibiades.Alkibiades/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlkibiadesServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Alkibiades_Options_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlkibiadesServer).Options(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apologia_alkibiades.Alkibiades/Options",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlkibiadesServer).Options(ctx, req.(*OptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Alkibiades_ServiceDesc is the grpc.ServiceDesc for Alkibiades service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Alkibiades_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apologia_alkibiades.Alkibiades",
	HandlerType: (*AlkibiadesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _Alkibiades_Health_Handler,
		},
		{
			MethodName: "Options",
			Handler:    _Alkibiades_Options_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/alkibiades.proto",
}
