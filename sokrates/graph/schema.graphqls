schema {
  query: Query
}

type AnalyzeResult {
  author: String
  book: String
  reference: String
  referenceLink: String
  text: Rhema
}

type AnalyzeTextResponse {
  conjugations: [ConjugationResponse]
  results: [AnalyzeResult]
  rootword: String
}

type ComprehensiveResponse {
  correct: Boolean
  foundInText: AnalyzeTextResponse
  quizWord: String
  similarWords: [Hit]
}

type ConjugationResponse {
  rule: String
  word: String
}

type Hit {
  dutch: String
  english: String
  greek: String
  linkedWord: String
  original: String
}

type Options {
  audioUrl: String
  imageUrl: String
  option: String
}

type QuizResponse {
  numberOfItems: Int
  options: [Options]
  quizItem: String
}

type Rhema {
  greek: String
  section: String
  translations: [String]
}

input MediaAnswerInput {
  theme: String
  set: String
  segment: String
  quizWord: String
  answer: String
  comprehensive: Boolean
}

input MediaQuizInput {
  excludeWords: [String]
  theme: String
  set: String
  segment: String
  order: String = null 
}

type Query {
  mediaAnswer(input: MediaAnswerInput): ComprehensiveResponse
  mediaQuiz(input: MediaQuizInput): QuizResponse
}
