schema {
  query: Query
}

type AnalyzeResult {
  author: String
  book: String
  reference: String
  referenceLink: String
  text: Rhema
}

type AnalyzeTextResponse {
  conjugations: [ConjugationResponse]
  results: [AnalyzeResult]
  rootword: String
}

type ComprehensiveResponse {
  correct: Boolean
  foundInText: AnalyzeTextResponse
  quizWord: String
  similarWords: [Hit]
}

type ConjugationResponse {
  rule: String
  word: String
}

type Hit {
  dutch: String
  english: String
  greek: String
  linkedWord: String
  original: String
}

type MediaOptions {
  audioUrl: String
  imageUrl: String
  option: String
}

type Options {
  option: String
}

type MediaQuizResponse {
  numberOfItems: Int
  options: [MediaOptions]
  quizItem: String
}

type MultipleChoiceResponse {
  numberOfItems: Int
  options: [Options]
  quizItem: String
}

type Rhema {
  greek: String
  section: String
  translations: [String]
}

type AuthorBasedAnswerResponse {
  correct: Boolean
  quizWord: String
  wordsInText: [String]
}

type AuthorBasedResponse {
  fullSentence: String
  translation: String
  reference: String
  quiz: AuthorBasedQuiz
  grammarQuiz: [GrammarQuizAdded]
}

type AuthorBasedQuiz {
  quizItem: String
  numberOfItems: Int
  options: [AuthorBasedOptions]
}

type AuthorBasedOptions {
  quizWord: String
}

type GrammarQuizAdded {
  correctAnswer: String
  wordInText: String
  extraInformation: String
  options: [AuthorBasedOptions]
}


input MediaAnswerInput {
  theme: String
  set: String
  segment: String
  quizWord: String
  answer: String
  comprehensive: Boolean
}

input AuthorBasedAnswerInput {
  theme: String
  set: String
  segment: String
  quizWord: String
  answer: String
}

input MediaQuizInput {
  excludeWords: [String]
  theme: String
  set: String
  segment: String
  order: String = null 
}

input AuthorBasedInput {
  excludeWords: [String]
  theme: String
  set: String
  segment: String
}

input MultipleChoiceAnswerInput {
  theme: String
  set: String
  quizWord: String
  answer: String
  comprehensive: Boolean
}

input MultipleQuizInput {
  excludeWords: [String]
  theme: String
  set: String
  order: String = null
}

type Query {
  mediaAnswer(input: MediaAnswerInput): ComprehensiveResponse
  mediaQuiz(input: MediaQuizInput): MediaQuizResponse
  multipleChoiceAnswer(input: MultipleChoiceAnswerInput): ComprehensiveResponse
  multipleChoiceQuiz(input: MultipleQuizInput): MultipleChoiceResponse
  authorBasedAnswer(input: AuthorBasedAnswerInput): AuthorBasedAnswerResponse
  authorBasedQuiz(input: AuthorBasedInput): AuthorBasedResponse
}
