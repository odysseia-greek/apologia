package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.68

import (
	"context"
	"fmt"

	"github.com/odysseia-greek/agora/plato/config"
	pbartrippos "github.com/odysseia-greek/apologia/aristippos/proto"
	pbkritias "github.com/odysseia-greek/apologia/kritias/proto"
	pbkriton "github.com/odysseia-greek/apologia/kriton/proto"
	"github.com/odysseia-greek/apologia/sokrates/graph/model"
	pbxenofon "github.com/odysseia-greek/apologia/xenofon/proto"
)

// Health is the resolver for the health field.
func (r *queryResolver) Health(ctx context.Context) (*model.AggregatedHealthResponse, error) {
	requestID, _ := ctx.Value(config.HeaderKey).(string)
	sessionId, _ := ctx.Value(config.SessionIdKey).(string)
	return r.Handler.Health(requestID, sessionId)
}

// MediaOptions is the resolver for the mediaOptions field.
func (r *queryResolver) MediaOptions(ctx context.Context) (*model.AggregatedOptions, error) {
	requestID, _ := ctx.Value(config.HeaderKey).(string)
	sessionId, _ := ctx.Value(config.SessionIdKey).(string)
	return r.Handler.MediaOptions(requestID, sessionId)
}

// MultipleChoiceOptions is the resolver for the multipleChoiceOptions field.
func (r *queryResolver) MultipleChoiceOptions(ctx context.Context) (*model.AggregatedOptions, error) {
	panic(fmt.Errorf("not implemented: MultipleChoiceOptions - multipleChoiceOptions"))
}

// AuthorBasedOptions is the resolver for the authorBasedOptions field.
func (r *queryResolver) AuthorBasedOptions(ctx context.Context) (*model.AggregatedOptions, error) {
	panic(fmt.Errorf("not implemented: AuthorBasedOptions - authorBasedOptions"))
}

// DialogueOptions is the resolver for the dialogueOptions field.
func (r *queryResolver) DialogueOptions(ctx context.Context) (*model.AggregatedOptions, error) {
	panic(fmt.Errorf("not implemented: DialogueOptions - dialogueOptions"))
}

// MediaAnswer is the resolver for the mediaAnswer field.
func (r *queryResolver) MediaAnswer(ctx context.Context, input *model.MediaAnswerInput) (*model.ComprehensiveResponse, error) {
	requestID, _ := ctx.Value(config.HeaderKey).(string)
	sessionId, _ := ctx.Value(config.SessionIdKey).(string)

	pb := &pbartrippos.AnswerRequest{
		Theme:         *input.Theme,
		Set:           *input.Set,
		Segment:       *input.Segment,
		Comprehensive: *input.Comprehensive,
		Answer:        *input.Answer,
		QuizWord:      *input.QuizWord,
	}

	return r.Handler.CheckMedia(pb, requestID, sessionId)
}

// MediaQuiz is the resolver for the mediaQuiz field.
func (r *queryResolver) MediaQuiz(ctx context.Context, input *model.MediaQuizInput) (*model.MediaQuizResponse, error) {
	requestID, _ := ctx.Value(config.HeaderKey).(string)
	sessionId, _ := ctx.Value(config.SessionIdKey).(string)

	pb := &pbartrippos.CreationRequest{
		Theme:           *input.Theme,
		Set:             *input.Set,
		Segment:         *input.Segment,
		DoneAfter:       *input.DoneAfter,
		ResetProgress:   *input.ResetProgress,
		ArchiveProgress: *input.ArchiveProgress,
	}

	if input.Order != nil {
		pb.Order = *input.Order
	}

	return r.Handler.CreateMediaQuiz(pb, requestID, sessionId)
}

// MultipleChoiceAnswer is the resolver for the multipleChoiceAnswer field.
func (r *queryResolver) MultipleChoiceAnswer(ctx context.Context, input *model.MultipleChoiceAnswerInput) (*model.ComprehensiveResponse, error) {
	requestID, _ := ctx.Value(config.HeaderKey).(string)

	pb := &pbkritias.AnswerRequest{
		Theme:         *input.Theme,
		Set:           *input.Set,
		Comprehensive: *input.Comprehensive,
		Answer:        *input.Answer,
		QuizWord:      *input.QuizWord,
	}

	return r.Handler.CheckMultipleChoice(pb, requestID)
}

// MultipleChoiceQuiz is the resolver for the multipleChoiceQuiz field.
func (r *queryResolver) MultipleChoiceQuiz(ctx context.Context, input *model.MultipleQuizInput) (*model.MultipleChoiceResponse, error) {
	requestID, _ := ctx.Value(config.HeaderKey).(string)

	pb := &pbkritias.CreationRequest{
		Theme: *input.Theme,
		Set:   *input.Set,
	}

	if input.Order != nil {
		pb.Order = *input.Order
	}

	for _, word := range input.ExcludeWords {
		pb.ExcludeWords = append(pb.ExcludeWords, *word)
	}

	return r.Handler.CreateMultipleChoiceQuiz(pb, requestID)
}

// AuthorBasedAnswer is the resolver for the authorBasedAnswer field.
func (r *queryResolver) AuthorBasedAnswer(ctx context.Context, input *model.AuthorBasedAnswerInput) (*model.AuthorBasedAnswerResponse, error) {
	requestID, _ := ctx.Value(config.HeaderKey).(string)

	pb := &pbxenofon.AnswerRequest{
		Theme:    *input.Theme,
		Set:      *input.Set,
		Segment:  *input.Segment,
		Answer:   *input.Answer,
		QuizWord: *input.QuizWord,
	}

	return r.Handler.CheckAuthorBased(pb, requestID)
}

// AuthorBasedQuiz is the resolver for the authorBasedQuiz field.
func (r *queryResolver) AuthorBasedQuiz(ctx context.Context, input *model.AuthorBasedInput) (*model.AuthorBasedResponse, error) {
	requestID, _ := ctx.Value(config.HeaderKey).(string)

	pb := &pbxenofon.CreationRequest{
		Theme:   *input.Theme,
		Set:     *input.Set,
		Segment: *input.Segment,
	}

	for _, word := range input.ExcludeWords {
		pb.ExcludeWords = append(pb.ExcludeWords, *word)
	}

	return r.Handler.CreateAuthorBasedQuiz(pb, requestID)
}

// DialogueAnswer is the resolver for the dialogueAnswer field.
func (r *queryResolver) DialogueAnswer(ctx context.Context, input *model.DialogueAnswerInput) (*model.DialogueAnswer, error) {
	requestID, _ := ctx.Value(config.HeaderKey).(string)

	pb := &pbkriton.AnswerRequest{
		Theme: *input.Theme,
		Set:   *input.Set,
	}

	for _, content := range input.Content {
		pb.Content = append(pb.Content, &pbkriton.DialogueContent{
			Translation: *content.Translation,
			Greek:       *content.Greek,
			Place:       *content.Place,
			Speaker:     *content.Speaker,
		})
	}

	return r.Handler.CheckDialogueQuiz(pb, requestID)
}

// DialogueQuiz is the resolver for the dialogueQuiz field.
func (r *queryResolver) DialogueQuiz(ctx context.Context, input *model.DialogueQuizInput) (*model.DialogueQuizResponse, error) {
	requestID, _ := ctx.Value(config.HeaderKey).(string)

	pb := &pbkriton.CreationRequest{
		Theme: *input.Theme,
		Set:   *input.Set,
	}

	return r.Handler.CreateDialogueQuiz(pb, requestID)
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *queryResolver) Options(ctx context.Context) (*model.AggregatedOptions, error) {

}
*/
