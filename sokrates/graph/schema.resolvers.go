package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"

	"github.com/odysseia-greek/agora/plato/config"
	pbartrippos "github.com/odysseia-greek/apologia/aristippos/proto"
	"github.com/odysseia-greek/apologia/sokrates/graph/model"
)

// MediaAnswer is the resolver for the mediaAnswer field.
func (r *queryResolver) MediaAnswer(ctx context.Context, input *model.MediaAnswerInput) (*model.ComprehensiveResponse, error) {
	requestID, _ := ctx.Value(config.HeaderKey).(string)

	pb := &pbartrippos.AnswerRequest{
		Theme:         *input.Theme,
		Set:           *input.Set,
		Segment:       *input.Segment,
		Comprehensive: *input.Comprehensive,
		Answer:        *input.Answer,
		QuizWord:      *input.QuizWord,
	}

	return r.Handler.CheckMedia(pb, requestID)
}

// MediaQuiz is the resolver for the mediaQuiz field.
func (r *queryResolver) MediaQuiz(ctx context.Context, input *model.MediaQuizInput) (*model.QuizResponse, error) {
	requestID, _ := ctx.Value(config.HeaderKey).(string)

	pb := &pbartrippos.CreationRequest{
		Theme:   *input.Theme,
		Set:     *input.Set,
		Segment: *input.Segment,
	}

	if input.Order != nil {
		pb.Order = *input.Order
	}

	for _, word := range input.ExcludeWords {
		pb.ExcludeWords = append(pb.ExcludeWords, *word)
	}

	return r.Handler.CreateMediaQuiz(pb, requestID)
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
