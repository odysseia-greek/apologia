syntax = "proto3";
option go_package = "github.com/odysseia-greek/apologia/xenofon/proto";

package apologia_xenofon;

service Xenofon {
  rpc Health (HealthRequest) returns (HealthResponse) {};
  rpc Options (OptionsRequest) returns (AggregatedOptions) {};
  rpc Question (CreationRequest) returns (QuizResponse) {};
  rpc Answer (AnswerRequest) returns (AnswerResponse) {};
}

// Empty request messages since these endpoints require no body
message HealthRequest {}

message OptionsRequest {
}

// Response message for health check
message HealthResponse {
  bool healthy = 1;
  string time = 2;
  string version = 3;
  DatabaseHealth database_health = 4;
}

// Nested message for database health details
message DatabaseHealth {
  bool healthy = 1;
  string cluster_name = 2;
  string server_name = 3;
  string server_version = 4;
}

// Response message for quiz options
message AggregatedOptions {
  repeated Theme themes = 1;
}

// Structure for quiz themes
message Theme {
  string name = 1;
  repeated Segment segments = 2;
}

// Structure for segments within a theme
message Segment {
  string name = 1;
  float max_set = 2;
}

// Request message for creating a quiz question
message CreationRequest {
  string theme = 1;
  string set = 2;
  string segment = 3; // Optional
  int32 doneAfter = 4; // Number of times a word must be played before it's considered done
  bool resetProgress = 5;   // Hard reset
  bool archiveProgress = 6; // Soft reset (archive and start fresh)
}

// Request message for checking an answer
message AnswerRequest {
  string theme = 1;
  string set = 2;
  string segment = 3;
  string answer = 4;
  string quiz_word = 5;
  int32 doneAfter = 6;
}

message QuizResponse {
  string fullSentence = 1;
  string translation = 2;
  string reference = 3;
  Quiz quiz = 4;
  repeated GrammarQuizAdded grammarQuiz = 5;
  repeated ProgressEntry progress = 6; // Optional: only if sessionId is set

}

message Quiz {
  string quizItem = 1;
  int32 numberOfItems = 2;
  repeated Options options = 3;
}

message Options {
  string quizWord = 1;
}

message GrammarQuizAdded {
  string correctAnswer = 1;
  string wordInText = 2;
  string extraInformation = 3;
  repeated Options options = 4;
}

message AnswerResponse {
  bool correct = 1;
  string quizWord = 2;
  repeated string wordsInText = 3;
  repeated ProgressEntry progress = 4; // Optional: only if sessionId is set
  bool finished = 5;

}

// Word progress entry
message ProgressEntry {
  string greek = 1;
  string translation = 2;
  int32 play_count = 3;
  int32 correct_count = 4;
  int32 incorrect_count = 5;
  string last_played = 6; // ISO timestamp format
}